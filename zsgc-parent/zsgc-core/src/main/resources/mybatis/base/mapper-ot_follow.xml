<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="followDAO">
    <resultMap id="follow" type="com.zsgc.core.model.Follow">
        <result property="id" column="id" />
        <result property="userId" column="userId" />
        <result property="followUserId" column="follow_uid" />
        <result property="followUserType" column="follow_type" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <sql id="sql_column_list">
        id
        ,userId
        ,follow_uid
        ,follow_type
        ,created_at
        ,updated_at
    </sql>
	
	<select id="getFollowNum" parameterType="java.lang.Integer" resultType="java.lang.Integer">
		SELECT COUNT(*) 
		FROM ot_follow 
		WHERE follow_uid=#{uId} AND follow_type !=0 GROUP BY follow_uid
	</select>
	
	<select id="getFollowType" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT follow_type 
		FROM ot_follow 
		WHERE userId = #{myId} and follow_uid=#{uId}
	</select>
	<update id="changeAtten" parameterType="java.util.Map">
        UPDATE ot_follow
        set follow_type = #{followType},
        updated_at = #{update}
        WHERE userId = #{myId} and follow_uid = #{uId}
    </update>
    
    <insert id="insert" parameterType="java.util.Map">
        INSERT INTO ot_follow (
        userId
        ,follow_uid
        ,follow_type
        ,created_at
        ,updated_at 
        ) VALUES (
        #{entity.userId},
        #{entity.followUserId},
        #{entity.followUserType},
        #{entity.createdAt},
        #{entity.updatedAt}
        )
    </insert>
    <sql id="sql_update_set">
        <trim prefix="SET" prefixOverrides=",">
            <if test="entity != null">
                <choose>
                    <when test="entity.forceUpdateProperties.contains('id')">
                        ,id = #{entity.id, jdbcType=INTEGER}
                    </when>
                    <otherwise>
                        <if test="entity.id != null">,id = #{entity.id}</if>
                    </otherwise>
                </choose>
                <choose>
                    <when test="entity.forceUpdateProperties.contains('userId')">
                        , userId= #{entity.userId, jdbcType=INTEGER}
                    </when>
                    <otherwise>
                        <if test="entity.userId != null">, userId= #{entity.userId}</if>
                    </otherwise>
                </choose>
                <choose>
                    <when test="entity.forceUpdateProperties.contains('followUserId')">
                        , follow_uid= #{entity.followUserId, jdbcType=VARCHAR}
                    </when>
                    <otherwise>
                        <if test="entity.followUserId != null">, follow_uid= #{entity.followUserId}</if>
                    </otherwise>
                </choose>
                <choose>
                    <when test="entity.forceUpdateProperties.contains('followUserType')">
                        , follow_type= #{entity.followUserType, jdbcType=VARCHAR}
                    </when>
                    <otherwise>
                        <if test="entity.followUserType != null">, follow_type= #{entity.followUserType}</if>
                    </otherwise>
                </choose>
                <choose>
		          <when test="entity.forceUpdateProperties.contains('createdAt')">
		            ,created_at = #{entity.createdAt, jdbcType=TIMESTAMP}
		          </when>
		          <otherwise>
		            <if test="entity.createdAt != null">,created_at = #{entity.createdAt}</if>
		          </otherwise>
		        </choose>
		        <choose>
		          <when test="entity.forceUpdateProperties.contains('updatedAt')">
		            ,updated_at = #{entity.updatedAt, jdbcType=TIMESTAMP}
		          </when>
		          <otherwise>
		            <if test="entity.updatedAt != null">,updated_at = #{entity.updatedAt}</if>
		            <if test="entity.updatedAt == null">,updated_at = NOW()</if>
		          </otherwise>
		        </choose>
                <if test="!entity.incrementUpdateMap.isEmpty()">
                    ,
                    <foreach collection="entity.incrementUpdateMap" index="key" item="value" separator=",">
                        ${key} = ${key} + #{value}
                    </foreach>
                </if>
            </if>
        </trim>
    </sql>
    <sql id="sql_insert_column_list">
        <trim prefix="" prefixOverrides=",">
            <if test="entity.id != null">,id</if>
            <if test="entity.userId != null">,userId</if>
            <if test="entity.followUserId != null">,follow_uid</if>
            <if test="entity.followUserType != null">,follow_type</if>
            <if test="entity.createdAt != null">,created_at</if>
            <if test="entity.createdAt == null">,created_at</if>
            <if test="entity.updatedAt != null">,updated_at</if>
            <if test="entity.updatedAt == null">,updated_at</if>
            
        </trim>
    </sql>

    <sql id="sql_insert_property_list">
        <trim prefix="" prefixOverrides=",">
            <if test="entity.id != null">,#{entity.id}</if>
             <if test="entity.userId != null">,#{entity.userId}</if>
            <if test="entity.followUserId != null">,#{entity.followUserId}</if>
            <if test="entity.followUserType != null">,#{entity.followUserType}</if>
            <if test="entity.createdAt != null">,#{entity.createdAt}</if>
            <if test="entity.createdAt == null">,NOW()</if>
            <if test="entity.updatedAt != null">,#{entity.updatedAt}</if>
            <if test="entity.updatedAt == null">,NOW()</if>
        </trim>
    </sql>


    <sql id="sql_condition">
        <if test="condition != null">
            <if test="condition.id != null">AND id = #{condition.id}</if>
            <if test="condition.userId != null">AND userId = #{condition.userId}</if>
            <if test="condition.followUserId != null">AND follow_uid = #{condition.followUserId}</if>
            <if test="condition.followUserType != null">AND follow_type = #{condition.followUserType}</if>
            <if test="condition.createdAt != null">AND created_at = #{condition.createdAt}</if>   
            <if test="condition.updatedAt != null">AND updated_at = #{condition.updatedAt}</if>         
            <if test="!condition.expressionChainList.empty">
                AND
                <foreach collection="condition.expressionChainList" item="expressionChain" separator="OR">
                    <if test="!expressionChain.expressionList.empty">
                        <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
                            <choose>
                                <when test="expression.type == 0">
                                    ${expression.column} ${expression.operator}
                                </when>
                                <when test="expression.type == 1">
                                    ${expression.column} ${expression.operator} #{expression.value}
                                </when>
                                <when test="expression.type == 2">
                                    ${expression.column} ${expression.operator} #{expression.value} AND #{expression.value1}
                                </when>
                                <when test="expression.type == 3">
                                    ${expression.column} ${expression.operator}
                                    <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                                        #{value}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </if>
                </foreach>
            </if>
        </if>
    </sql>

    <sql id="sql_pagination_start">
       <![CDATA[
     ]]>
    </sql>

    <sql id="sql_pagination_end">
        <![CDATA[
    LIMIT #{offset}, #{limit}
  ]]>
</sql>

    <select id="get" parameterType="java.util.Map" resultMap="follow">
        SELECT
        <include refid="sql_column_list" />
        FROM ot_follow
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
    </select>

    <select id="getById" parameterType="java.util.Map" resultMap="follow">
        SELECT
        <include refid="sql_column_list" />
        FROM ot_follow
        WHERE id = #{id}
    </select>

    <select id="find" parameterType="java.util.Map" resultMap="follow">
        <if test="offset != null">
            <include refid="sql_pagination_start" />
        </if>
        SELECT
        <include refid="sql_column_list" />
        FROM ot_follow
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
        </if>
        <if test="offset != null">
            <include refid="sql_pagination_end" />
        </if>
    </select>

    <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
        SELECT count(${count_column}) AS count_ FROM ot_follow
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
        AND follow_type !=0
    </select>

    <select id="aggregate" parameterType="java.util.Map" resultType="java.util.HashMap">
        SELECT ${aggregate_sql} FROM ot_follow
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
    </select>

    <update id="update" parameterType="java.util.Map">
        UPDATE ot_follow
        <include refid="sql_update_set" />
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
    </update>

    <update id="updateById" parameterType="java.util.Map">
        UPDATE ot_follow
        <include refid="sql_update_set" />
        WHERE id = #{id}
    </update>

    <delete id="remove" parameterType="java.util.Map">
        DELETE FROM ot_follow
        <trim prefix="WHERE" prefixOverrides="AND">
            <include refid="sql_condition" />
        </trim>
    </delete>

    <delete id="removeById" parameterType="java.util.Map">
        DELETE FROM ot_follow
        WHERE id = #{id}
    </delete> 
</mapper>
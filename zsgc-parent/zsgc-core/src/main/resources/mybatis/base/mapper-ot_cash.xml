<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC
    "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cashDAO">
  <resultMap id="cash" type="com.zsgc.core.model.Cash">
    <result property="id" column="id" />
    <result property="number" column="number" />
    <result property="orderId" column="order_id" />
    <result property="uid" column="uid" />
    <result property="cash" column="cash" />
    <result property="type" column="type" />
    <result property="createdAt" column="created_at" />
    <result property="updatedAt" column="updated_at" />
    <result property="balance" column="balance" />
    <result property="freeze" column="freeze" />
    <result property="total" column="total" />
    <result property="remark" column="remark" />
  </resultMap>

  <sql id="sql_insert_column_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,id</if>
      <if test="entity.number != null and entity.number != ''">,number</if>
      <if test="entity.orderId != null and entity.orderId != ''">,order_id</if>
      <if test="entity.uid != null">,uid</if>
      <if test="entity.cash != null">,cash</if>
      <if test="entity.type != null">,type</if>
      <if test="entity.createdAt != null">,created_at</if>
      <if test="entity.createdAt == null">,created_at</if>
      <if test="entity.updatedAt != null">,updated_at</if>
      <if test="entity.updatedAt == null">,updated_at</if>
      <if test="entity.balance != null">,balance</if>
      <if test="entity.freeze != null">,freeze</if>
      <if test="entity.total != null">,total</if>
      <if test="entity.remark != null">,remark</if>
    </trim>
  </sql>

  <sql id="sql_insert_property_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,#{entity.id}</if>
      <if test="entity.number != null and entity.number != ''">,#{entity.number}</if>
      <if test="entity.orderId != null and entity.orderId != ''">,#{entity.orderId}</if>
      <if test="entity.uid != null">,#{entity.uid}</if>
      <if test="entity.cash != null">,#{entity.cash}</if>
      <if test="entity.type != null">,#{entity.type}</if>
      <if test="entity.createdAt != null">,#{entity.createdAt}</if>
      <if test="entity.createdAt == null">,NOW()</if>
      <if test="entity.updatedAt != null">,#{entity.updatedAt}</if>
      <if test="entity.updatedAt == null">,NOW()</if>
      <if test="entity.balance != null">,#{entity.balance}</if>
      <if test="entity.freeze != null">,#{entity.freeze}</if>
      <if test="entity.total != null">,#{entity.total}</if>
      <if test="entity.remark != null">,#{entity.remark}</if>
    </trim>
  </sql>

  <sql id="sql_column_list">
    id
    ,number
    ,order_id
    ,uid
    ,cash
    ,type
    ,created_at
    ,updated_at
    ,balance
    ,freeze
    ,total
    ,remark
  </sql>

  <sql id="sql_update_set">
    <trim prefix="SET" prefixOverrides=",">
      <if test="entity != null">
        <choose>
          <when test="entity.forceUpdateProperties.contains('id')">
            ,id = #{entity.id, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.id != null">,id = #{entity.id}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('number')">
            ,number = #{entity.number, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.number != null and entity.number != ''">,number = #{entity.number}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('orderId')">
            ,order_id = #{entity.orderId, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.orderId != null and entity.orderId != ''">,order_id = #{entity.orderId}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('uid')">
            ,uid = #{entity.uid, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.uid != null">,uid = #{entity.uid}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('cash')">
            ,cash = #{entity.cash, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.cash != null">,cash = #{entity.cash}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('type')">
            ,type = #{entity.type, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.type != null">,type = #{entity.type}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('createdAt')">
            ,created_at = #{entity.createdAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.createdAt != null">,created_at = #{entity.createdAt}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('updatedAt')">
            ,updated_at = #{entity.updatedAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.updatedAt != null">,updated_at = #{entity.updatedAt}</if>
            <if test="entity.updatedAt == null">,updated_at = NOW()</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('balance')">
            ,balance = #{entity.balance, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.balance != null">,balance = #{entity.balance}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('freeze')">
            ,freeze = #{entity.freeze, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.freeze != null">,freeze = #{entity.freeze}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('total')">
            ,total = #{entity.total, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.total != null">,total = #{entity.total}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('remark')">
            ,remark = #{entity.remark, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.remark != null">,total = #{entity.remark}</if>
          </otherwise>
        </choose>
        <if test="!entity.incrementUpdateMap.isEmpty()">
          ,
          <foreach collection="entity.incrementUpdateMap" index="key" item="value" separator=",">
            ${key} = ${key} + #{value}
          </foreach>
        </if>
      </if>
    </trim>
  </sql>

  <sql id="sql_condition">
    <if test="condition != null">
      <if test="condition.id != null">AND id = #{condition.id}</if>
      <if test="condition.number != null and condition.number != ''">AND number = #{condition.number}</if>
      <if test="condition.orderId != null and condition.orderId != ''">AND order_id = #{condition.orderId}</if>
      <if test="condition.uid != null">AND uid = #{condition.uid}</if>
      <if test="condition.cash != null">AND cash = #{condition.cash}</if>
      <if test="condition.type != null">AND type = #{condition.type}</if>
      <if test="condition.createdAt != null">AND created_at = #{condition.createdAt}</if>
      <if test="condition.updatedAt != null">AND updated_at = #{condition.updatedAt}</if>
      <if test="condition.balance != null">AND balance = #{condition.balance}</if>
      <if test="condition.freeze != null">AND freeze = #{condition.freeze}</if>
      <if test="condition.total != null">AND total = #{condition.total}</if>
      <if test="condition.remark != null">AND remark = #{condition.remark}</if>
      <if test="!condition.expressionChainList.empty">
        AND
        <foreach collection="condition.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  ${expression.column} ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  ${expression.column} ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  ${expression.column} ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  ${expression.column} ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
    </if>
  </sql>

  <sql id="sql_pagination_start">
  <![CDATA[
  ]]>
  </sql>

  <sql id="sql_pagination_end">
  <![CDATA[
    LIMIT #{offset}, #{limit}
  ]]>
  </sql>

  <insert id="insert" parameterType="java.util.Map">
    <selectKey keyProperty="entity.id" resultType="java.lang.Integer" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO ot_cash (
      <include refid="sql_insert_column_list" />
    ) VALUES (
      <include refid="sql_insert_property_list" />
    )
  </insert>

  <select id="get" parameterType="java.util.Map" resultMap="cash">
    SELECT
      <include refid="sql_column_list" />
    FROM ot_cash
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <select id="getById" parameterType="java.util.Map" resultMap="cash">
    SELECT
      <include refid="sql_column_list" />
    FROM ot_cash
    WHERE id = #{id}
  </select>

  <select id="find" parameterType="java.util.Map" resultMap="cash">
    <if test="offset != null">
      <include refid="sql_pagination_start" />
    </if>
    SELECT
      <include refid="sql_column_list" />
    FROM ot_cash
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
    <if test="orderBy != null">
      ORDER BY ${orderBy}
    </if>
    <if test="offset != null">
      <include refid="sql_pagination_end" />
    </if>
  </select>

  <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(${count_column}) AS count_ FROM ot_cash
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.HashMap">
    SELECT ${aggregate_sql} FROM ot_cash
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <update id="update" parameterType="java.util.Map">
    UPDATE ot_cash
    <include refid="sql_update_set" />
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </update>

  <update id="updateById" parameterType="java.util.Map">
    UPDATE ot_cash
    <include refid="sql_update_set" />
    WHERE id = #{id}
  </update>

  <delete id="remove" parameterType="java.util.Map">
    DELETE FROM ot_cash
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </delete>

  <delete id="removeById" parameterType="java.util.Map">
    DELETE FROM ot_cash
    WHERE id = #{id}
  </delete>
</mapper>

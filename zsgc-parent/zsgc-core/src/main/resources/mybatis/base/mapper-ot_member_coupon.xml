<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC
    "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberCouponDAO">
  <resultMap id="memberCoupon" type="com.zsgc.core.model.MemberCoupon">
    <result property="id" column="id" />
    <result property="uid" column="uid" />
    <result property="type" column="type" />
    <result property="name" column="name" />
    <result property="money" column="money" />
    <result property="rate" column="rate" />
    <result property="minInvestMoney" column="min_invest_money" />
    <result property="maxInvestMoney" column="max_invest_money" />
    <result property="minDeadline" column="min_deadline" />
    <result property="maxDeadline" column="max_deadline" />
    <result property="remark" column="remark" />
    <result property="createdAt" column="created_at" />
    <result property="updatedAt" column="updated_at" />
    <result property="usedAt" column="used_at" />
    <result property="endAt" column="end_at" />
    <result property="getStatus" column="get_status" />
    <result property="fromWhere" column="from_where" />
  </resultMap>

  <sql id="sql_insert_column_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,id</if>
      <if test="entity.uid != null">,uid</if>
      <if test="entity.type != null">,type</if>
      <if test="entity.name != null and entity.name != ''">,name</if>
      <if test="entity.money != null">,money</if>
      <if test="entity.rate != null">,rate</if>
      <if test="entity.minInvestMoney != null">,min_invest_money</if>
      <if test="entity.maxInvestMoney != null">,max_invest_money</if>
      <if test="entity.minDeadline != null">,min_deadline</if>
      <if test="entity.maxDeadline != null">,max_deadline</if>
      <if test="entity.remark != null and entity.remark != ''">,remark</if>
      <if test="entity.createdAt != null">,created_at</if>
      <if test="entity.createdAt == null">,created_at</if>
      <if test="entity.updatedAt != null">,updated_at</if>
      <if test="entity.updatedAt == null">,updated_at</if>
      <if test="entity.usedAt != null">,used_at</if>
      <if test="entity.endAt != null">,end_at</if>
      <if test="entity.getStatus != null">,get_status</if>
      <if test="entity.fromWhere != null and entity.fromWhere != ''">,from_where</if>
    </trim>
  </sql>

  <sql id="sql_insert_property_list">
    <trim prefix="" prefixOverrides=",">
      <if test="entity.id != null">,#{entity.id}</if>
      <if test="entity.uid != null">,#{entity.uid}</if>
      <if test="entity.type != null">,#{entity.type}</if>
      <if test="entity.name != null and entity.name != ''">,#{entity.name}</if>
      <if test="entity.money != null">,#{entity.money}</if>
      <if test="entity.rate != null">,#{entity.rate}</if>
      <if test="entity.minInvestMoney != null">,#{entity.minInvestMoney}</if>
      <if test="entity.maxInvestMoney != null">,#{entity.maxInvestMoney}</if>
      <if test="entity.minDeadline != null">,#{entity.minDeadline}</if>
      <if test="entity.maxDeadline != null">,#{entity.maxDeadline}</if>
      <if test="entity.remark != null and entity.remark != ''">,#{entity.remark}</if>
      <if test="entity.createdAt != null">,#{entity.createdAt}</if>
      <if test="entity.createdAt == null">,NOW()</if>
      <if test="entity.updatedAt != null">,#{entity.updatedAt}</if>
      <if test="entity.updatedAt == null">,NOW()</if>
      <if test="entity.usedAt != null">,#{entity.usedAt}</if>
      <if test="entity.endAt != null">,#{entity.endAt}</if>
      <if test="entity.getStatus != null">,#{entity.getStatus}</if>
      <if test="entity.fromWhere != null and entity.fromWhere != ''">,#{entity.fromWhere}</if>
    </trim>
  </sql>

  <sql id="sql_column_list">
    id
    ,uid
    ,type
    ,name
    ,money
    ,rate
    ,min_invest_money
    ,max_invest_money
    ,min_deadline
    ,max_deadline
    ,remark
    ,created_at
    ,updated_at
    ,used_at
    ,end_at
    ,get_status
    ,from_where
  </sql>

  <sql id="sql_update_set">
    <trim prefix="SET" prefixOverrides=",">
      <if test="entity != null">
        <choose>
          <when test="entity.forceUpdateProperties.contains('id')">
            ,id = #{entity.id, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.id != null">,id = #{entity.id}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('uid')">
            ,uid = #{entity.uid, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.uid != null">,uid = #{entity.uid}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('type')">
            ,type = #{entity.type, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.type != null">,type = #{entity.type}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('name')">
            ,name = #{entity.name, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.name != null and entity.name != ''">,name = #{entity.name}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('money')">
            ,money = #{entity.money, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.money != null">,money = #{entity.money}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('rate')">
            ,rate = #{entity.rate, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.rate != null">,rate = #{entity.rate}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('minInvestMoney')">
            ,min_invest_money = #{entity.minInvestMoney, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.minInvestMoney != null">,min_invest_money = #{entity.minInvestMoney}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('maxInvestMoney')">
            ,max_invest_money = #{entity.maxInvestMoney, jdbcType=DECIMAL}
          </when>
          <otherwise>
            <if test="entity.maxInvestMoney != null">,max_invest_money = #{entity.maxInvestMoney}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('minDeadline')">
            ,min_deadline = #{entity.minDeadline, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.minDeadline != null">,min_deadline = #{entity.minDeadline}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('maxDeadline')">
            ,max_deadline = #{entity.maxDeadline, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.maxDeadline != null">,max_deadline = #{entity.maxDeadline}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('remark')">
            ,remark = #{entity.remark, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.remark != null and entity.remark != ''">,remark = #{entity.remark}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('createdAt')">
            ,created_at = #{entity.createdAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.createdAt != null">,created_at = #{entity.createdAt}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('updatedAt')">
            ,updated_at = #{entity.updatedAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.updatedAt != null">,updated_at = #{entity.updatedAt}</if>
            <if test="entity.updatedAt == null">,updated_at = NOW()</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('usedAt')">
            ,used_at = #{entity.usedAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.usedAt != null">,used_at = #{entity.usedAt}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('endAt')">
            ,end_at = #{entity.endAt, jdbcType=TIMESTAMP}
          </when>
          <otherwise>
            <if test="entity.endAt != null">,end_at = #{entity.endAt}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('getStatus')">
            ,get_status = #{entity.getStatus, jdbcType=INTEGER}
          </when>
          <otherwise>
            <if test="entity.getStatus != null">,get_status = #{entity.getStatus}</if>
          </otherwise>
        </choose>
        <choose>
          <when test="entity.forceUpdateProperties.contains('fromWhere')">
            ,from_where = #{entity.fromWhere, jdbcType=VARCHAR}
          </when>
          <otherwise>
            <if test="entity.fromWhere != null and entity.fromWhere != ''">,from_where = #{entity.fromWhere}</if>
          </otherwise>
        </choose>
        <if test="!entity.incrementUpdateMap.isEmpty()">
          ,
          <foreach collection="entity.incrementUpdateMap" index="key" item="value" separator=",">
            ${key} = ${key} + #{value}
          </foreach>
        </if>
      </if>
    </trim>
  </sql>

  <sql id="sql_condition">
    <if test="condition != null">
      <if test="condition.id != null">AND id = #{condition.id}</if>
      <if test="condition.uid != null">AND uid = #{condition.uid}</if>
      <if test="condition.type != null">AND type = #{condition.type}</if>
      <if test="condition.name != null and condition.name != ''">AND name = #{condition.name}</if>
      <if test="condition.money != null">AND money = #{condition.money}</if>
      <if test="condition.rate != null">AND rate = #{condition.rate}</if>
      <if test="condition.minInvestMoney != null">AND min_invest_money = #{condition.minInvestMoney}</if>
      <if test="condition.maxInvestMoney != null">AND max_invest_money = #{condition.maxInvestMoney}</if>
      <if test="condition.minDeadline != null">AND min_deadline = #{condition.minDeadline}</if>
      <if test="condition.maxDeadline != null">AND max_deadline = #{condition.maxDeadline}</if>
      <if test="condition.remark != null and condition.remark != ''">AND remark = #{condition.remark}</if>
      <if test="condition.createdAt != null">AND created_at = #{condition.createdAt}</if>
      <if test="condition.updatedAt != null">AND updated_at = #{condition.updatedAt}</if>
      <if test="condition.usedAt != null">AND used_at = #{condition.usedAt}</if>
      <if test="condition.endAt != null">AND end_at = #{condition.endAt}</if>
      <if test="condition.getStatus != null">AND get_status = #{condition.getStatus}</if>
      <if test="condition.fromWhere != null and condition.fromWhere != ''">AND from_where = #{condition.fromWhere}</if>
      <if test="!condition.expressionChainList.empty">
        AND
        <foreach collection="condition.expressionChainList" item="expressionChain" separator="OR">
          <if test="!expressionChain.expressionList.empty">
            <foreach collection="expressionChain.expressionList" item="expression" separator="AND">
              <choose>
                <when test="expression.type == 0">
                  ${expression.column} ${expression.operator}
                </when>
                <when test="expression.type == 1">
                  ${expression.column} ${expression.operator} #{expression.value}
                </when>
                <when test="expression.type == 2">
                  ${expression.column} ${expression.operator} #{expression.value} AND #{expression.value1}
                </when>
                <when test="expression.type == 3">
                  ${expression.column} ${expression.operator}
                  <foreach collection="expression.values" item="value" open="(" separator="," close=")">
                    #{value}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </if>
        </foreach>
      </if>
    </if>
  </sql>

  <sql id="sql_pagination_start">
  <![CDATA[
  ]]>
  </sql>

  <sql id="sql_pagination_end">
  <![CDATA[
    LIMIT #{offset}, #{limit}
  ]]>
  </sql>

  <insert id="insert" parameterType="java.util.Map">
    <selectKey keyProperty="entity.id" resultType="java.lang.Integer" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO ot_member_coupon (
      <include refid="sql_insert_column_list" />
    ) VALUES (
      <include refid="sql_insert_property_list" />
    )
  </insert>

  <select id="get" parameterType="java.util.Map" resultMap="memberCoupon">
    SELECT
      <include refid="sql_column_list" />
    FROM ot_member_coupon
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <select id="getById" parameterType="java.util.Map" resultMap="memberCoupon">
    SELECT
      <include refid="sql_column_list" />
    FROM ot_member_coupon
    WHERE id = #{id}
  </select>

  <select id="find" parameterType="java.util.Map" resultMap="memberCoupon">
    <if test="offset != null">
      <include refid="sql_pagination_start" />
    </if>
    SELECT
      <include refid="sql_column_list" />
    FROM ot_member_coupon
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
    <if test="orderBy != null">
      ORDER BY ${orderBy}
    </if>
    <if test="offset != null">
      <include refid="sql_pagination_end" />
    </if>
  </select>

  <select id="count" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(${count_column}) AS count_ FROM ot_member_coupon
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <select id="aggregate" parameterType="java.util.Map" resultType="java.util.HashMap">
    SELECT ${aggregate_sql} FROM ot_member_coupon
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </select>

  <update id="update" parameterType="java.util.Map">
    UPDATE ot_member_coupon
    <include refid="sql_update_set" />
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </update>

  <update id="updateById" parameterType="java.util.Map">
    UPDATE ot_member_coupon
    <include refid="sql_update_set" />
    WHERE id = #{id}
  </update>

  <delete id="remove" parameterType="java.util.Map">
    DELETE FROM ot_member_coupon
    <trim prefix="WHERE" prefixOverrides="AND">
      <include refid="sql_condition" />
    </trim>
  </delete>

  <delete id="removeById" parameterType="java.util.Map">
    DELETE FROM ot_member_coupon
    WHERE id = #{id}
  </delete>
</mapper>
